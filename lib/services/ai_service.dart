// lib/services/ai_service.dart
import 'package:flutter_tts/flutter_tts.dart';
import 'package:speech_to_text/speech_to_text.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import '../core/config/api_config.dart';

// Classe pour les messages de chat
class ChatMessage {
  final String text;
  final bool isUser;
  final bool isVoice;
  final DateTime timestamp;

  ChatMessage({required this.text, required this.isUser, this.isVoice = false, DateTime? timestamp})
    : timestamp = timestamp ?? DateTime.now();
}

class AIService {
  // Services
  late GenerativeModel _gemini;
  late FlutterTts _flutterTts;
  late SpeechToText _speechToText;

  // √âtats
  bool _isInitialized = false;
  bool _ttsInitialized = false;
  bool _speechInitialized = false;

  // Getters pour v√©rifier l'√©tat
  bool get isInitialized => _isInitialized;
  bool get isTtsAvailable => _ttsInitialized;
  bool get isSpeechAvailable => _speechInitialized;

  // Callbacks TTS
  Function()? onTtsStart;
  Function()? onTtsComplete;

  // Contexte O'secours (identique √† GeminiService)
static const String _projectContext = '''
Vous √™tes l'assistant IA de l'application O'secours, une application mobile d'urgence en C√¥te d'Ivoire.

CONTEXTE DU PROJET:
O'secours est une application mobile d'urgence con√ßue sp√©cialement pour la C√¥te d'Ivoire. Elle permet aux utilisateurs de signaler des urgences, d'obtenir de l'aide rapidement, de localiser les services d'urgence locaux comme les h√¥pitaux et pharmacies, et de contacter directement les secours.

FONCTIONNALIT√âS PRINCIPALES:
L'application propose des alertes d'urgence g√©olocalis√©es, la gestion des contacts d'urgence (famille, amis, services), la localisation des h√¥pitaux et pharmacies, des conseils de premiers secours et une assistance m√©dicale d'urgence.

NUM√âROS D'URGENCE EN C√îTE D'IVOIRE:
En cas d'urgence, voici les num√©ros officiels √† composer : 185 (ou +225 27 22 44 53 53) pour le SAMU et les urgences m√©dicales, 180 pour les Pompiers et la Protection civile, 110 ou 111 ou 170 pour la Police secours, 199 pour la D√©fense nationale, 111 pour la Gendarmerie ou 145 pour l'unit√© sp√©ciale CCDO. Pour les urgences techniques, composez le 175 pour le d√©pannage eau SODECI ou le 179 pour le d√©pannage √©lectricit√© CIE. Ces num√©ros sont gratuits et disponibles 24h/24.

SERVICES DISPONIBLES:
Vous avez acc√®s aux informations sur les h√¥pitaux et cliniques, les pharmacies de garde, les services de police, les pompiers, le SAMU (Service d'Aide M√©dicale Urgente), les ambulances, la gendarmerie et les services de d√©pannage d'urgence.

R√àGLES DE R√âPONSE:
R√©pondez uniquement aux questions li√©es aux urgences, √† la sant√© et √† la s√©curit√© en C√¥te d'Ivoire. Donnez des informations pratiques et utiles. Encouragez √† appeler les services d'urgence si n√©cessaire. Restez dans le contexte de l'application O'secours.

Utilisez un ton professionnel et rassurant. R√©digez vos r√©ponses en paragraphes fluides, sans utiliser de formatage markdown, sans puces, sans texte en gras et sans grands titres. Privil√©giez des paragraphes courts s√©par√©s par des sauts de ligne pour faciliter la lecture.

Si une question n'est pas li√©e aux urgences, √† la sant√© ou √† la s√©curit√©, r√©pondez poliment que vous ne pouvez aider que pour les urgences et questions de sant√© en C√¥te d'Ivoire.
''';


  AIService() {
    _initializeServices();
  }

  Future<void> _initializeServices() async {
    try {
      // Initialiser Gemini
      _gemini = GenerativeModel(model: ApiConfig.geminiModel, apiKey: ApiConfig.geminiApiKey);

      // Initialiser TTS
      await _initializeTTS();

      // Initialiser Speech-to-Text
      await _initializeSpeech();

      _isInitialized = true;
    } catch (e) {
      print('Erreur lors de l\'initialisation des services: $e');
    }
  }

  Future<void> _initializeTTS() async {
    try {
      _flutterTts = FlutterTts();

      await _flutterTts.setLanguage("fr-FR");
      await _flutterTts.setSpeechRate(0.5);
      await _flutterTts.setVolume(1.0);
      await _flutterTts.setPitch(1.0);

      _flutterTts.setStartHandler(() {
        onTtsStart?.call();
      });

      _flutterTts.setCompletionHandler(() {
        onTtsComplete?.call();
      });

      _flutterTts.setErrorHandler((message) {
        print('Erreur TTS: $message');
        onTtsComplete?.call();
      });

      _ttsInitialized = true;
    } catch (e) {
      print('Erreur lors de l\'initialisation TTS: $e');
      _ttsInitialized = false;
    }
  }

  Future<void> _initializeSpeech() async {
    try {
      _speechToText = SpeechToText();

      bool available = await _speechToText.initialize(
        onError: (errorNotification) {
          print('Erreur Speech-to-Text: ${errorNotification.errorMsg}');
        },
        onStatus: (status) {
          print('Status Speech-to-Text: $status');
        },
      );

      _speechInitialized = available;
    } catch (e) {
      print('Erreur lors de l\'initialisation Speech-to-Text: $e');
      _speechInitialized = false;
    }
  }

  // G√©n√©rer une r√©ponse avec Gemini (contexte O'secours)
  Future<String> generateResponse(String input) async {
    if (!_isInitialized) {
      throw Exception('Service AI non initialis√©');
    }

    try {
      // Cr√©er le prompt avec le contexte O'secours
      final prompt = '''$_projectContext

QUESTION DE L'UTILISATEUR: $input

R√©pondez en tant qu'assistant O'secours sp√©cialis√© en urgences et sant√©.''';

      final response = await _gemini.generateContent([Content.text(prompt)]);

      if (response.text != null && response.text!.isNotEmpty) {
        return response.text!;
      } else {
        return getFallbackResponse(input);
      }
    } catch (e) {
      print('Erreur lors de la g√©n√©ration de contenu: $e');
      return getFallbackResponse(input);
    }
  }

  // R√©ponses de secours (identiques √† GeminiService)
  String getFallbackResponse(String userMessage) {
    String message = userMessage.toLowerCase();

    if (message.contains('h√¥pital') || message.contains('hopital')) {
      return "Voici les h√¥pitaux les plus proches de votre position :\n\nüè• CHU de Treichville - 2.3 km\nüè• H√¥pital G√©n√©ral de Bingerville - 4.1 km\nüè• Clinique Internationale Sainte Anne-Marie - 3.8 km\n\nSouhaitez-vous que je vous guide vers l'un d'eux ?";
    } else if (message.contains('pharmacie')) {
      return "Voici les pharmacies de garde les plus proches :\n\nüíä Pharmacie de la Paix - Ouverte 24h/24 - 1.2 km\nüíä Pharmacie du Plateau - Ouverte jusqu'√† 22h - 2.1 km\nüíä Pharmacie Nouvelle - Ouverte 24h/24 - 3.5 km\n\nVoulez-vous les coordonn√©es de l'une d'elles ?";
    } else if (message.contains('accident') && message.contains('voiture')) {
      return "En cas d'accident de voiture, voici les √©tapes √† suivre :\n\n1. üö® S√©curisez la zone et allumez vos feux de d√©tresse\n2. üìû Appelez les secours (185 ou 170)\n3. ü©π V√©rifiez s'il y a des bless√©s\n4. üìã √âtablissez un constat amiable si possible\n5. üì∏ Prenez des photos des d√©g√¢ts\n\nAvez-vous besoin d'aide pour contacter les secours ?";
    } else if (message.contains('urgence') || message.contains('secours')) {
      return "Pour une urgence, voici les num√©ros √† composer :\n\nüö® Police: 170\nüöë SAMU: 185\nüöí Pompiers: 180\n\nEn cas d'urgence vitale, n'h√©sitez pas √† appeler directement ces num√©ros.";
    } else {
      return "Je suis l'assistant O'secours, sp√©cialis√© dans les urgences et la sant√©. Je peux vous aider avec :\n\n‚Ä¢ Localiser les h√¥pitaux et pharmacies\n‚Ä¢ Donner des conseils d'urgence\n‚Ä¢ Fournir les num√©ros d'urgence\n‚Ä¢ Guider en cas d'accident\n\nQue puis-je faire pour vous aider ?";
    }
  }

  // Text-to-Speech
  Future<void> speak(String text) async {
    if (!_ttsInitialized || text.trim().isEmpty) return;

    try {
      // Nettoyer le texte pour TTS (enlever markdown)
      String cleanText = _cleanTextForTTS(text);
      await _flutterTts.speak(cleanText);
    } catch (e) {
      print('Erreur lors de la synth√®se vocale: $e');
    }
  }

  Future<void> stopSpeaking() async {
    if (!_ttsInitialized) return;

    try {
      await _flutterTts.stop();
    } catch (e) {
      print('Erreur lors de l\'arr√™t de la synth√®se vocale: $e');
    }
  }

  // Speech-to-Text
  Future<void> startListening({required Function(String) onResult, required Function(bool) onListeningChange}) async {
    if (!_speechInitialized) {
      throw Exception('Service de reconnaissance vocale non disponible');
    }

    try {
      onListeningChange(true);

      await _speechToText.listen(
        onResult: (result) {
          onResult(result.recognizedWords);

          if (result.finalResult) {
            onListeningChange(false);
          }
        },
        localeId: 'fr-FR',
        listenFor: Duration(seconds: 30),
        pauseFor: Duration(seconds: 3),
        partialResults: true,
      );
    } catch (e) {
      print('Erreur lors du d√©marrage de l\'√©coute: $e');
      onListeningChange(false);
    }
  }

  Future<void> stopListening() async {
    if (!_speechInitialized) return;

    try {
      await _speechToText.stop();
    } catch (e) {
      print('Erreur lors de l\'arr√™t de l\'√©coute: $e');
    }
  }

  // Nettoyer le texte pour la synth√®se vocale (enlever markdown)
  String _cleanTextForTTS(String text) {
    return text
        .replaceAll(RegExp(r'\*\*(.*?)\*\*'), r'\1') // **texte** ‚Üí texte
        .replaceAll(RegExp(r'\*(.*?)\*'), r'\1') // *texte* ‚Üí texte
        .replaceAll(RegExp(r'`(.*?)`'), r'\1') // `code` ‚Üí code
        .replaceAll(RegExp(r'#{1,6}\s*'), '') // # titre ‚Üí titre
        .replaceAll(RegExp(r'\n\s*\n'), '. ') // Double saut de ligne ‚Üí point
        .replaceAll('\n', ' ') // Saut de ligne ‚Üí espace
        .replaceAll('‚Ä¢', '') // Puces
        .replaceAll('üè•', 'H√¥pital') // Emojis h√¥pital
        .replaceAll('üíä', 'Pharmacie') // Emojis pharmacie
        .replaceAll('üö®', 'Urgence') // Emojis urgence
        .replaceAll('üìû', 'T√©l√©phone') // Emojis t√©l√©phone
        .replaceAll('ü©π', 'Soins') // Emojis soins
        .replaceAll(RegExp(r'[üî•‚ö°üöëüöíüë®‚Äç‚öïÔ∏è]'), '') // Autres emojis
        .trim();
  }

  // Configuration TTS
  Future<void> configureTTS({double? speechRate, double? volume, double? pitch, String? language}) async {
    if (!_ttsInitialized) return;

    try {
      if (speechRate != null) await _flutterTts.setSpeechRate(speechRate);
      if (volume != null) await _flutterTts.setVolume(volume);
      if (pitch != null) await _flutterTts.setPitch(pitch);
      if (language != null) await _flutterTts.setLanguage(language);
    } catch (e) {
      print('Erreur lors de la configuration TTS: $e');
    }
  }

  // Nettoyage des ressources
  void dispose() {
    try {
      _flutterTts.stop();
      _speechToText.stop();
    } catch (e) {
      print('Erreur lors du nettoyage: $e');
    }
  }
}
